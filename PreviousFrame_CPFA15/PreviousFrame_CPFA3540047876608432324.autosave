//===========================================================================
/////////////   LIBRARIES   /////////////
import processing.video.*;
import themidibus.*; 
import controlP5.*;
import java.util.*;
import ddf.minim.*;
import ddf.minim.ugens.*;
// need to import this so we can use Mixer and Mixer.Info objects
import javax.sound.sampled.*;
//import processing.sound.*;
/////////////////////////////////////////

PFont font;

//===========================================================================
/////////////   CONTROLS    /////////////
ControlP5 cp5;
Knob myKnobA, myKnobB, myKnobC, myKnobD;
boolean useGrid1, useGrid2, useGrid3, useGrid4, useGrid5, useGrid6, useGrid7, useGrid8, useGrid9, useGrid10, useGrid11, useGrid12 = false;
boolean useMidiOut1, useMidiOut2, useMidiOut3, useMidiOut4, useMidiOut5 = false;
boolean useVideo1, useVideo2, useVideo3 = false;
boolean useInstrument1, useInstrument2, useInstrument3, useMani, useNott = false;
boolean presetMani, presetNott = false;
boolean play, stop, overdub, rec, record, seq1, seq2, seq3, seq4, track1, track2, track3, track4 = false;
//Grid Button Counters
int g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12 = 0;
//Labels for Grid2
Textlabel label1, label2, label3, label4, label5, label6, label7, label8, label9, label10, label11, label12;
//TextAreas
Textarea midiouts, audioins, audioouts;
//Video Toggles
boolean video1, video2, video3;
//boolean toggleVideo1, toggleVideo2, toggleVideo3;
boolean instrument1, instrument2, instrument3, Mani, Nott = false;
int audio;
int button = 110;
/////////////////////////////////////////

//===========================================================================
/////////////   LIFESPAN    /////////////
int maxLife = 127;
int minLife = 0;
//Variables for different lifespans
int lifespanA, lifespanB, lifespanC, lifespanD, lifespanE, lifespanF, lifespanG, lifespanH, lifespanI, lifespanJ, lifespanK, lifespanL = minLife;
//Up and Down Lifespan
int lifeA, lifeB, lifeC, lifeD, lifeE, lifeF, lifeG, lifeH, lifeI, lifeJ, lifeK, lifeL;
int AddLifeA = 1; 
int AddLifeB = 1;
int AddLifeC = 1;
int AddLifeD = 1;
int AddLifeE = 1;
int AddLifeF = 1;
int AddLifeG = 1;
int AddLifeH = 1;
int AddLifeI = 1;
int AddLifeJ = 1;
int AddLifeK = 1;
int AddLifeL = 1;
/////////////////////////////////////////
int lifespanA2, lifespanB2, lifespanC2, lifespanD2 = minLife;
int lifeA2, lifeB2, lifeC2, lifeD2;
int AddLifeA2 = 1;
int AddLifeB2 = 1;
int AddLifeC2 = 1;
int AddLifeD2 = 1;
/////////////////////////////////////////


//===========================================================================
///////////////   GRID    ///////////////
//320 = width, 4 = number of grid divisions on x
int videoScaleX = 320/4;
//240 = height, 3 = number of grid divisions on y
int videoScaleY = 240/3;
int cols, rows;
int i = 0; //column
int j = 0; //row
// Scaling up to draw a rectangle at (x,y)
int xgrid = i*videoScaleX;
int ygrid = j*videoScaleY;
/////////////////////////////////////////

//===========================================================================
//////   AVERAGE COLOR TRACKING    //////
//AvgX
float avgXA, avgXB, avgXC, avgXD, avgXE, avgXF, avgXG, avgXH, avgXI, avgXJ, avgXK, avgXL;
//AvgY
float avgYA, avgYB, avgYC, avgYD, avgYE, avgYF, avgYG, avgYH, avgYI, avgYJ, avgYK, avgYL;
//Pixel Count
int countA, countB, countC, countD, countE, countF, countG, countH, countI, countJ, countK, countL;
//Variables for the colors we are searching for.
color trackColorA, trackColorB, trackColorC, trackColorD, trackColorE, trackColorF, trackColorG, trackColorH, trackColorI, trackColorJ, trackColorK, trackColorL;
/////////////////////////////////////////
color colorA, colorB, colorC, colorD;
float avgXA2, avgXB2, avgXC2, avgXD2;
float avgYA2, avgYB2, avgYC2, avgYD2;
int countA2, countB2, countC2, countD2;
/////////////////////////////////////////

//===========================================================================
//////MIDIBUS, NOTES AND VELOCITIES//////
//The MidiBus
MidiBus busA;
MidiBus busB;
MidiBus busC;
MidiBus busD;
int noteA, noteB, noteC, noteD, noteE, noteF, noteG, noteH, noteI, noteJ, noteK, noteL;
int velocityA, velocityB, velocityC, velocityD, velocityE, velocityF, velocityG, velocityH, velocityI, velocityJ, velocityK, velocityL;
int midi = -1;
/////////////////////////////////////////

//===========================================================================
///////////////   AUDIO   ///////////////
Minim minim;
AudioInput in;
Mixer.Info[] mixerInfo;
int activeMixer = -1;
ArrayList<Rect> mixerButtons = new ArrayList<Rect>();
int micThreshold = 10;
// for recording
AudioRecorder recorder1, recorder2, recorder3, recorder4;
boolean recorded1, recorded2, recorded3, recorded4;
// for playing back
AudioOutput out;
int activeMixer2 = -1;
ArrayList<Rect> mixerButtons2 = new ArrayList<Rect>();
ArrayList<AudioPlayer> player1 = new ArrayList<AudioPlayer>();
ArrayList<AudioPlayer> player2 = new ArrayList<AudioPlayer>();
ArrayList<AudioPlayer> player3 = new ArrayList<AudioPlayer>();
ArrayList<AudioPlayer> player4 = new ArrayList<AudioPlayer>();
AudioPlayer player;
int number1, number2, number3, number4;
/////////////////////////////////////////

//===========================================================================
///////////   VIDEOCAPTURE    ///////////
// Variable for capture device
Capture video;
// Previous Frame of Video
PImage prevFrame;
// How different must a pixel be to be a "motion" pixel - previous frame
int threshold = 100;
/////////////////////////////////////////
//color tracking
int threshold2 = 10;
/////////////////////////////////////////

//===========================================================================
/////////////   COUNTERS    /////////////
int ii = 0;
int ee = 0;
int aa = 0;
int iiplay = 0;
int iistop = 0;
int iioverdub = 0;
int iirec = 0;
int iiseq1 = 0;
int iiseq2 = 0;
int iiseq3 = 0;
int iiseq4 = 0;
int iitrack1 = 0;
int iitrack2 = 0;
int iitrack3 = 0;
int iitrack4 = 0;

//===========================================================================
//////////////   TIMERS    //////////////
int rectimer;
color[] recColors = new color[2]; //colors for rec
int recColor;
/////////////////////////////////////////


void setup() {

  surface.setLocation(0, 0);
  //Program window size
  size (960, 720);

  //===========================================================================
  ///////////   VIDEOCAPTURE    ///////////
  //List all available camera options. Show each option index and name.
  String[] cams = Capture.list();
  printArray(cams);
  //String cama = join(cams, " ");
  //text(cama, 20, 260, 340, 240);
  //Create new capture
  video = new Capture(this, 320, 240);
  //Initialize capture
  video.start();
  // Create an empty image the same size as the video
  prevFrame = createImage(video.width, video.height, RGB);
  /////////////////////////////////////////

  //===========================================================================
  ///////////////   GRID    ///////////////
  // Initialize columns and rows
  cols = video.width/videoScaleX;
  rows = video.height/videoScaleY;
  /////////////////////////////////////////

  //===========================================================================
  //////   AVERAGE COLOR TRACKING    //////
  // Start off tracking for colors
  trackColorA = color(255, 0, 0);   //Red
  trackColorB = color(0, 255, 0);   //Green
  trackColorC = color(0, 0, 255);   //Blue
  trackColorD = color(255, 0, 255); //Pink
  trackColorE = color(255, 255, 0); //Yellow
  trackColorF = color(0, 255, 255); //Light Blue
  trackColorG = color(255, 127, 0); //Orange
  trackColorH = color(255, 0, 127); //Dark Pink
  trackColorI = color(127, 255, 0); //Light Green 
  trackColorJ = color(0, 255, 127); //Pale Green
  trackColorK = color(0, 127, 255); //Pale Blue
  trackColorL = color(127, 0, 255); //Purple
  /////////////////////////////////////////
  colorA = color(255, 0, 0);   //Red
  colorB = color(0, 255, 0);   //Green
  colorC = color(0, 0, 255);   //Blue
  colorD = color(255, 0, 255); //Pink
  //===========================================================================
  ///////////////   MIDI    ///////////////
  Println("Available MIDI Devices:"); 
  Println("--------------------Output-------------------");  
  String[] available_outputs = MidiBus.availableOutputs(); //Returns an array of available output devices
  for (int i = 0; i < available_outputs.length; i++) {
    Println ("["+i+"] \""+available_outputs[i]+"\"");
  }

  // Create a new MidiBus with no input device and the default Java Sound Synthesizer as the output device.
  busA = new MidiBus(this, -1, midi); // Create a new MidiBus with no input device and the default Java Sound Synthesizer as the output device.
  busB = new MidiBus(this, -1, midi); // Create a new MidiBus with no input device and the default Java Sound Synthesizer as the output device.
  busC = new MidiBus(this, -1, midi); // Create a new MidiBus with no input device and the default Java Sound Synthesizer as the output device.
  busD = new MidiBus(this, -1, midi); // Create a new MidiBus with no input device and the default Java Sound Synthesizer as the output device.
  /////////////////////////////////////////

  //===========================================================================
  /////////////   AUDIO   ///////////////
  minim = new Minim(this);
  mixerInfo = AudioSystem.getMixerInfo();

  //Println2("Available AUDIO Devices:"); 
  for (int i = 0; i < mixerInfo.length; i++)
  {
    Println2 ("["+i+"] "+mixerInfo[i].getName()+";");
  }
  // get an output we can playback the recording on
  //out = minim.getLineOut( Minim.STEREO );
  /////////////////////////////////////////

  //===========================================================================
  //////////////   TIMERS    //////////////
  // set the colors in setup
  recColors[0] = color(255, 0, 0, 0); // no fill
  recColors[1] = color(255, 0, 0); // red
  /////////////////////////////////////////

  //===========================================================================
  /////////////   CONTROLS    /////////////
  //Init Controls
  cp5 = new ControlP5(this);
  initControls();
  initGridControls();
  initMidiChanControls();
  initMidiControls();
  initVideoControls();
  initAudioControls();
  initInstruments();
  initPresets();
  initMani();
  initNott();
  //Change Font
  PFont p = createFont("Verdana", 12); 
  ControlFont font = new ControlFont(p);
  cp5.setFont(font);

  label1 = cp5.addTextlabel("label1")    .setText("1")    .setPosition(640+0*videoScaleX, 0*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label2 = cp5.addTextlabel("label2")    .setText("2")    .setPosition(640+1*videoScaleX, 0*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label3 = cp5.addTextlabel("label3")    .setText("3")    .setPosition(640+2*videoScaleX, 0*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label4 = cp5.addTextlabel("label4")    .setText("4")    .setPosition(640+3*videoScaleX, 0*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label5 = cp5.addTextlabel("label5")    .setText("5")    .setPosition(640+0*videoScaleX, 1*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label6 = cp5.addTextlabel("label6")    .setText("6")    .setPosition(640+1*videoScaleX, 1*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label7 = cp5.addTextlabel("label7")    .setText("7")    .setPosition(640+2*videoScaleX, 1*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label8 = cp5.addTextlabel("label8")    .setText("8")    .setPosition(640+3*videoScaleX, 1*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label9 = cp5.addTextlabel("label9")    .setText("9")    .setPosition(640+0*videoScaleX, 2*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label10 = cp5.addTextlabel("label10")    .setText("10")    .setPosition(640+1*videoScaleX, 2*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label11 = cp5.addTextlabel("label11")    .setText("11")    .setPosition(640+2*videoScaleX, 2*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;
  label12 = cp5.addTextlabel("label12")    .setText("12")    .setPosition(640+3*videoScaleX, 2*videoScaleY)    .setColorValue(255)    .setFont(createFont("Verdana", 32))    ;

  midiouts = cp5.addTextarea("txt")    .setPosition(320, 80)    .setSize(320, 160)    .setFont(createFont("Verdana", 12))    .setLineHeight(15)    .setColor(0)    .setColorForeground(color(155))    ;
  midiouts.setText(fakeConsole);
  //audioins = cp5.addTextarea("txt2")    .setPosition(320, 240)    .setSize(320, 160)    .setFont(createFont("Verdana", 12))    .setLineHeight(15)    .setColor(0)    .setColorForeground(color(155))    ;
  /////////////////////////////////////////

  cp5.get(Toggle.class, "toggleVideo1").setValue(true);
}

//===========================================================================
///////////   VIDEOCAPTURE    ///////////

void captureEvent(Capture video) {

  // Save previous frame for motion detection
  prevFrame.copy(video, 0, 0, video.width, video.height, 0, 0, video.width, video.height); 
  // Before reading the new frame, save the previous frame for comparison
  prevFrame.updatePixels();  
  // Read image from the camera
  video.read();
}
/////////////////////////////////////////


void draw() {

  background(255);  

  font = createFont("Verdana", 24);
  //===========================================================================
  ////////////   FAKE CONSOLE   ///////////
  /////////////////////////////////////////

  ///////////   VIDEOCAPTURE    ///////////
  if (video1) {
    image(video, 0, 0, video.width, video.height);
  }

  //===========================================================================
  ///////////////   AUDIO   ///////////////
  fill(0);
  rect(409, 358, 202, 21);

  if ( in == null ) {
    stroke(255);
    // draw the waveforms
    for (int i = 320; i < 640; i++) {
      stroke(255, 0, 0); 
      strokeWeight(1);
      textFont(font, 24);
      line(i, 400, i+1, 400); 
      line(i, 450, i+1, 450);
      textAlign(CENTER, CENTER);
      text("no Audio input", 480, 421);
    }
    textFont(font, 12);
    textAlign(LEFT, TOP);
    text("No Volume", 330, 360);


    ///////////////   SQUARES    ///////////////
    // Begin loop for columns
    for (int i = 0; i < 11; i++) {
      int spacing = 18;
      int square = 14;
      int xgrid = 0 + i*spacing; 

      stroke(255);
      fill(155);
      strokeWeight(0); 
      if (i == 8 || i == 9) {
        fill(255, 255, 0, 155);
      }
      if (i ==10) {
        fill(255, 0, 0, 155);
      }

      // For every column and row, a rectangle is drawn at an (x,y) location scaled and sized by videoScale.
      rect(414 + xgrid, 362, square, square);
    }
  }


  if ( in != null ) {
    stroke(255);
    // draw the waveforms
    for (int i = 320; i < 640; i++) {
      stroke(0); 
      strokeWeight(1); 
      line(i, 400 + in.left.get(i)*20, i+1, 400+ in.left.get(i+1)*20); 
      line(i, 450 + in.right.get(i)*20, i+1, 450 + in.right.get(i+1)*20);
    }

    int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
    textFont(font, 12);
    textAlign(LEFT, TOP);
    text("Volume: " +mic, 330, 360);

    ///////////////   SQUARES    ///////////////
    // Begin loop for columns
    for (int i = 0; i < 11; i++) {
      int spacing = 18;
      int square = 14;
      int xgrid = 0 + i*spacing; 


      stroke(255);
      fill(155);
      strokeWeight(0); 
      if (i == 8 || i == 9) {
        fill(255, 255, 0, 155);
      }
      if (i ==10) {
        fill(255, 0, 0, 155);
      }
      if (mic > 0 && mic < 10 && i<1) {
        fill(0, 255, 0);
      }
      if (mic >= 10 && mic < 20 && i<2) {
        fill(0, 255, 0);
      }
      if (mic >= 20 && mic < 30 && i<3) {
        fill(0, 255, 0);
      }
      if (mic >= 30 && mic < 40 && i<4) {
        fill(0, 255, 0);
      }
      if (mic >= 40 && mic < 50 && i<5) {
        fill(0, 255, 0);
      }
      if (mic >= 50 && mic < 60 && i<6) {
        fill(0, 255, 0);
      }
      if (mic >= 60 && mic < 70 && i<7) {
        fill(0, 255, 0);
      }
      if (mic >= 70 && mic < 80 && i<8) {
        fill(255, 255, 0);
      }
      if (mic >= 80 && mic < 90 && i<9) {
        fill(255, 255, 0);
      }
      if (mic >= 90 && mic < 100 && i<10) {
        fill(255, 0, 0);
      }

      // For every column and row, a rectangle is drawn at an (x,y) location scaled and sized by videoScale.
      rect(414 + xgrid, 362, square, square);
    }
  }
  //Selector Color Tracking - Instrument 1 -
  if (ii == 0) {
    strokeWeight(1);
    stroke(0);
    fill(155, 155);
    rect(29, 575, 41, 16);
  }
  if (ii == 1) {
    strokeWeight(1);
    stroke(0);
    fill(155, 155);
    rect(99, 575, 41, 16);
  }

  if (ii == 2) {
    strokeWeight(1);
    stroke(0);
    fill(155, 155);
    rect(169, 575, 41, 16);
  }
  if (ii == 3) {
    strokeWeight(1);
    stroke(0);
    fill(155, 155);
    rect(239, 575, 41, 16);
  }

  stroke(255, 0, 0); 
  strokeWeight(1);
  textFont(font, 24);
  fill(0);
  textAlign(RIGHT, TOP);
  text("Presets", 530, 480);

  stroke(255, 0, 0); 
  strokeWeight(1);
  textFont(font, 24);
  fill(0);
  textAlign(RIGHT, TOP);
  text("Pieces", 835, 480);

  /////////////////////////////////////////
  loadPixels(); 
  video.loadPixels(); 
  prevFrame.loadPixels(); 
  /////////////////////////////////////////

  //////   AVERAGE COLOR TRACKING    //////
  //Initialize AvgX
  float avgXA = avgXB = avgXC = avgXD = avgXE = avgXF = avgXG = avgXH = avgXI = avgXJ = avgXK = avgXL = 0; 
  //Initialize AvgY
  float avgYA = avgYB = avgYC = avgYD = avgYE = avgYF = avgYG = avgYH = avgYI = avgYJ = avgYK = avgYL = 0; 
  //Initialize Pixel Count
  int countA = countB = countC = countD = countE = countF = countG = countH = countI = countJ = countK = countL = 0; 
  /////////////////////////////////////////
  float avgXA2 = avgXB2 = avgXC2 = avgXD2 = 0;
  float avgYA2 = avgYB2 = avgYC2 = avgYD2 = 0;
  int countA2 = countB2 = countC2 = countD2 =0;
  /////////////////////////////////////////

  // Begin loop to walk through every pixel
  for (int x = 0; x < video.width; x ++ ) {
    for (int y = 0; y < video.height; y ++ ) {

      int loc = x + y*video.width; // Step 1, what is the 1D pixel location
      color current = video.pixels[loc]; // Step 2, what is the current color
      color previous = prevFrame.pixels[loc]; // Step 3, what is the previous color

      //Compare colors (previous vs. current)
      float r1 = red(current); 
      float g1 = green(current); 
      float b1 = blue(current); 
      float r2 = red(previous); 
      float g2 = green(previous); 
      float b2 = blue(previous); 
      float diff = dist(r1, g1, b1, r2, g2, b2); 
      /////////////////////////////////////////
      float r3 = red(colorA);
      float g3 = green(colorA);
      float b3 = blue(colorA);
      float r4 = red(colorB);
      float g4 = green(colorB);
      float b4 = blue(colorB);
      float r5 = red(colorC);
      float g5 = green(colorC);
      float b5 = blue(colorC);
      float r6 = red(colorD);
      float g6 = green(colorD);
      float b6 = blue(colorD);

      // Using euclidean distance to compare colors
      float dA = dist(r1, g1, b1, r3, g3, b3); // We are using the dist( ) function to compare the current color with the color we are tracking.
      float dB = dist(r1, g1, b1, r4, g4, b4);
      float dC = dist(r1, g1, b1, r5, g5, b5);
      float dD = dist(r1, g1, b1, r6, g6, b6);
      /////////////////////////////////////////
      // If current color is more similar to tracked color than
      // closest color, save current location and current difference
      if (dA < threshold2) {
        avgXA2 += x;
        avgYA2 += y;
        countA2++;
      }
      if (dB < threshold2) {
        avgXB2 += x;
        avgYB2 += y;
        countB2++;
      }
      if (dC < threshold2) {
        avgXC2 += x;
        avgYC2 += y;
        countC2++;
      }
      if (dD < threshold2) {
        avgXD2 += x;
        avgYD2 += y;
        countD2++;
      }
      /////////////////////////////////////////

      if (video2) {
        // Step 5, How different are the colors?
        // If the color at that pixel has changed, then there is motion at that pixel.
        if (diff > threshold) { 
          // If motion, display black
          pixels[y*width+x] = color(0);
        } else {
          // If not, display white
          pixels[y*width+x] = color(255);
        }
      }

      ///////////////   CONDITIONS    ///////////////
      //Square (0,0)
      if (diff > threshold && (x > 0*videoScaleX && x < 1*videoScaleX) && (y > 0*videoScaleY && y < 1*videoScaleY)) { 
        if (video3) {
          // If motion, display RED
          pixels[y*width+x] = trackColorA;
        }
        avgXA += x; 
        avgYA += y; 
        countA++;
      }

      //Square (1,0)
      if (diff > threshold && (x > 1*videoScaleX && x < 2*videoScaleX) && (y > 0*videoScaleY && y < 1*videoScaleY)) { 
        if (video3) {
          // If motion, display GREEN
          pixels[y*width+x] = trackColorB;
        }
        avgXB += x; 
        avgYB += y; 
        countB++;
      }

      //Square (2,0)
      if (diff > threshold && (x > 2*videoScaleX && x < 3*videoScaleX) && (y > 0*videoScaleY && y < 1*videoScaleY)) { 
        if (video3) {
          // If motion, display BLUE
          pixels[y*width+x] = trackColorC;
        }
        avgXC += x; 
        avgYC += y; 
        countC++;
      }

      //Square (3,0)
      if (diff > threshold && (x > 3*videoScaleX && x < 4*videoScaleX) && (y > 0*videoScaleY && y < 1*videoScaleY)) { 
        if (video3) {
          // If motion, display PINK
          pixels[y*width+x] = trackColorD;
        }
        avgXD += x; 
        avgYD += y; 
        countD++;
      }

      //Square (0,1)
      if (diff > threshold && (x > 0*videoScaleX && x < 1*videoScaleX) && (y > 1*videoScaleY && y < 2*videoScaleY)) { 
        if (video3) {
          // If motion, display YELLOW
          pixels[y*width+x] = trackColorE;
        }
        avgXE += x; 
        avgYE += y; 
        countE++;
      }

      //Square (1,1)
      if (diff > threshold && (x > 1*videoScaleX && x < 2*videoScaleX) && (y > 1*videoScaleY && y < 2*videoScaleY)) { 
        if (video3) {
          // If motion, display LIGHT BLUE
          pixels[y*width+x] = trackColorF;
        }
        avgXF += x; 
        avgYF += y; 
        countF++;
      }

      //Square (2,1)
      if (diff > threshold && (x > 2*videoScaleX && x < 3*videoScaleX) && (y > 1*videoScaleY && y < 2*videoScaleY)) { 
        if (video3) {
          // If motion, display ORANGE
          pixels[y*width+x] = trackColorG;
        }
        avgXG += x; 
        avgYG += y; 
        countG++;
      }

      //Square (3,1)
      if (diff > threshold && (x > 3*videoScaleX && x < 4*videoScaleX) && (y > 1*videoScaleY && y < 2*videoScaleY)) { 
        if (video3) {
          // If motion, display DARK PINK
          pixels[y*width+x] = trackColorH;
        }
        avgXH += x; 
        avgYH += y; 
        countH++;
      }

      //Square (0,2)
      if (diff > threshold && (x > 0*videoScaleX && x < 1*videoScaleX) && (y > 2*videoScaleY && y < 3*videoScaleY)) { 
        if (video3) {
          // If motion, display LIGHT GREEN
          pixels[y*width+x] = trackColorI;
        }
        avgXI += x; 
        avgYI += y; 
        countI++;
      }

      //Square (1,2)
      if (diff > threshold && (x > 1*videoScaleX && x < 2*videoScaleX) && (y > 2*videoScaleY && y < 3*videoScaleY)) { 
        if (video3) {
          // If motion, display PALE GREEN
          pixels[y*width+x] = trackColorJ;
        }
        avgXJ += x; 
        avgYJ += y; 
        countJ++;
      }

      //Square (2,2)
      if (diff > threshold && (x > 2*videoScaleX && x < 3*videoScaleX) && (y > 2*videoScaleY && y < 3*videoScaleY)) { 
        if (video3) {
          // If motion, display PALE BLUE
          pixels[y*width+x] = trackColorK;
        }
        avgXK += x; 
        avgYK += y; 
        countK++;
      }

      //Square (3,2)
      if (diff > threshold && (x > 3*videoScaleX && x < 4*videoScaleX) && (y > 2*videoScaleY && y < 3*videoScaleY)) { 
        if (video3) {
          // If motion, display PURPLE
          pixels[y*width+x] = trackColorL;
        }
        avgXL += x; 
        avgYL += y; 
        countL++;
      }
      /////////////////////////////////////////////
    }
  }



  updatePixels(); 

  ///////////////   GRID    ///////////////
  // Begin loop for columns
  for (int i = 0; i < cols; i++) {
    // Begin loop for rows
    for (int j = 0; j < rows; j++) {
      // Scaling up to draw a rectangle at (x,y)
      int xgrid = 640 + i*videoScaleX; 
      int ygrid = 240 + j*videoScaleY; 
      noFill(); 
      stroke(0); 
      strokeWeight(1); 
      // For every column and row, a rectangle is drawn at an (x,y) location scaled and sized by videoScale.
      rect(xgrid, ygrid, videoScaleX, videoScaleY);
    }
  }

  // Begin loop for columns
  for (int i = 0; i < cols; i++) {
    // Begin loop for rows
    for (int j = 0; j < rows; j++) {
      // Scaling up to draw a rectangle at (x,y)
      int xgrid = i*videoScaleX; 
      int ygrid = j*videoScaleY; 
      noFill(); 
      stroke(0); 
      strokeWeight(1); 
      // For every column and row, a rectangle is drawn at an (x,y) location scaled and sized by videoScale.
      rect(xgrid, ygrid, videoScaleX, videoScaleY);
    }
  }
  /////////////////////////////////////////


  //===========================================================================
  /////////////PREVIOUS FRAME//////////////
  //////MIDIBUS, NOTES AND VELOCITIES//////
  if (instrument2 == true) {
    if (countA > 0) {
      lifespanA = maxLife;
    }
    if (lifespanA <= maxLife) {
      lifespanA--;
    }
    if (lifespanA <= minLife) {
      lifespanA = 0;
    }
    int triggerA = color(127, 127, 127, lifespanA); 
    int test1 = int(cp5.get(ScrollableList.class, "Midi1Ch").getValue());
    int midi1 = int(map(test1, 0, 16, -1, 15));

    //////   Average Color Tracking    //////
    if (countA > 0 && g1==1) { 
      // Draw a RED square at Grid (0,0), IF movement detected
      fill(triggerA); 
      rect(0, 0, videoScaleX, videoScaleY); 
      // Draw a RED circle at Grid (0,0)
      avgXA = avgXA / countA; 
      avgYA = avgYA / countA; 
      fill(trackColorA); 
      strokeWeight(0.05); 
      stroke(1); 
      ellipse(avgXA, avgYA, 16, 16); 

      if ( in != null && midi1 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));

        //Send Midi NoteOut
        float midinoteA = map(int(avgXA), 0, video.width, 0, 127); 
        int noteA = int(midinoteA); 
        //float midivelocityA = map(int(avgYA), 0, height, 0, 127); 
        //int velocityA = int(midivelocityA); 
        busA.sendNoteOn(midi1, noteA, mic); 
        println("MidiA: " + midi1, noteA, mic);
      }
    } else if (countA <= 0 && g1==1) {

      lifeA = lifeA + AddLifeA;
      if (lifeA > 127) {
        AddLifeA = -1;
      }
      if (lifeA < 0) {
        AddLifeA = 1;
      }

      // Draw a square at Grid (0,0), IF movement detected
      fill(triggerA); 
      rect(0, 0, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi1, lifeA, 0);
    }

    /////////////////////////////////////////

    if (countB > 0) {
      lifespanB = maxLife;
    }
    if (lifespanB <= maxLife) {
      lifespanB--;
    }
    if (lifespanB == minLife) {
      lifespanB = 0;
    }
    int triggerB = color(127, 127, 127, lifespanB); 
    int test2 = int(cp5.get(ScrollableList.class, "Midi2Ch").getValue());
    int midi2 = int(map(test2, 0, 16, -1, 15));

    if (countB > 0 && g2==1) { 
      // Draw a GREEN square at Grid (1,0), IF movement detected
      fill(triggerB); 
      rect(0 + 1*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a GREEN circle at Grid (1,0)
      avgXB = avgXB / countB; 
      avgYB = avgYB / countB; 
      fill(trackColorB); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXB, avgYB, 16, 16); 

      if ( in != null && midi2 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteB = map(int(avgXB), 0, video.width, 0, 127); 
        int noteB = int(midinoteB); 
        //float midivelocityB = map(int(avgYB), 0, height, 0, 127); 
        //int velocityB = int(midivelocityB); 
        busA.sendNoteOn(midi2, noteB, mic); 
        println("MidiB: " + midi2, noteB, mic);
      }
    } else if (countB <= 0 && g2==1) {

      lifeB = lifeB + AddLifeB;
      if (lifeB > 127) {
        AddLifeB = -1;
      }
      if (lifeB < 0) {
        AddLifeB = 1;
      }

      // Draw a square at Grid (1,0)
      fill(triggerB); 
      rect(1*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi2, lifeB, 0);
    }

    /////////////////////////////////////////

    if (countC > 0) {
      lifespanC = maxLife;
    }
    if (lifespanC <= maxLife) {
      lifespanC--;
    }
    if (lifespanC == minLife) {
      lifespanC = 0;
    }
    int triggerC = color(127, 127, 127, lifespanC); 
    int test3 = int(cp5.get(ScrollableList.class, "Midi3Ch").getValue());
    int midi3 = int(map(test3, 0, 16, -1, 15));

    if (countC > 0 && g3==1) { 
      // Draw a BLUE square at Grid (2,0), IF movement detected
      fill(triggerC); 
      rect(2*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a BLUE circle at Grid (2,0)
      avgXC = avgXC / countC; 
      avgYC = avgYC / countC; 
      fill(trackColorC); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXC, avgYC, 16, 16); 

      if ( in != null && midi3 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteC = map(int(avgXC), 0, video.width, 0, 127); 
        int noteC = int(midinoteC); 
        //float midivelocityC = map(int(avgYC), 0, height, 0, 127); 
        //int velocityC = int(midivelocityC); 
        busA.sendNoteOn(midi3, noteC, mic); 
        println("MidiC: " + midi3, noteC, mic);
      }
    } else if (countC <= 0 && g3==1) {

      lifeC = lifeC + AddLifeC;
      if (lifeC > 127) {
        AddLifeC = -1;
      }
      if (lifeC < 0) {
        AddLifeC = 1;
      }

      // Draw a square at Grid (2,0)
      fill(triggerC); 
      rect(2*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi3, lifeC, 0);
    }

    /////////////////////////////////////////

    if (countD > 0) {
      lifespanD = maxLife;
    }
    if (lifespanD <= maxLife) {
      lifespanD--;
    }
    if (lifespanD == minLife) {
      lifespanD = 0;
    }
    int triggerD = color(127, 127, 127, lifespanD); 
    int test4 = int(cp5.get(ScrollableList.class, "Midi4Ch").getValue());
    int midi4 = int(map(test4, 0, 16, -1, 15));

    if (countD > 0 && g4==1) { 
      // Draw a PINK square at Grid (3,0), IF movement detected
      fill(triggerD); 
      rect(3*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a PINK circle at Grid (3,0)
      avgXD = avgXD / countD; 
      avgYD = avgYD / countD; 
      fill(trackColorD); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXD, avgYD, 16, 16); 

      if ( in != null && midi4 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteD = map(int(avgXD), 0, video.width, 0, 127); 
        int noteD = int(midinoteD); 
        //float midivelocityD = map(int(avgYD), 0, height, 0, 127); 
        //int velocityD = int(midivelocityD); 
        busA.sendNoteOn(midi4, noteD, mic); 
        println("MidiD: " + midi4, noteD, mic);
      }
    } else if (countD <= 0 && g4==1) {

      lifeD = lifeD + AddLifeD;
      if (lifeD > 127) {
        AddLifeD = -1;
      }
      if (lifeD < 0) {
        AddLifeD = 1;
      }

      // Draw a square at Grid (3,0)
      fill(triggerD); 
      rect(3*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi4, lifeD, 0);
    }

    /////////////////////////////////////////

    if (countE > 0) {
      lifespanE = maxLife;
    }
    if (lifespanE <= maxLife) {
      lifespanE--;
    }
    if (lifespanE == minLife) {
      lifespanE = 0;
    }
    int triggerE = color(127, 127, 127, lifespanE); 
    int test5 = int(cp5.get(ScrollableList.class, "Midi5Ch").getValue());
    int midi5 = int(map(test5, 0, 16, -1, 15));

    if (countE > 0 && g5==1) { 
      // Draw a YELLOW square at Grid (0,1), IF movement detected
      fill(triggerE); 
      rect(0*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a YELLOW circle at Grid (0,1)
      avgXE = avgXE / countE; 
      avgYE = avgYE / countE; 
      fill(trackColorE); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXE, avgYE, 16, 16); 

      if ( in != null && midi5 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteE = map(int(avgXE), 0, video.width, 0, 127); 
        int noteE = int(midinoteE); 
        //float midivelocityE = map(int(avgYE), 0, height, 0, 127); 
        //int velocityE = int(midivelocityE); 
        busA.sendNoteOn(midi5, noteE, mic); 
        println("MidiE: " + midi5, noteE, mic);
      }
    } else if (countE <= 0 && g5==1) {

      lifeE = lifeE + AddLifeE;
      if (lifeE > 127) {
        AddLifeE = -1;
      }
      if (lifeE < 0) {
        AddLifeE = 1;
      }

      // Draw a square at Grid (0,1)
      fill(triggerE); 
      rect(0*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi5, lifeE, 0);
    }

    /////////////////////////////////////////

    if (countF > 0) {
      lifespanF = maxLife;
    }
    if (lifespanF <= maxLife) {
      lifespanF--;
    }
    if (lifespanF == minLife) {
      lifespanF = 0;
    }
    int triggerF = color(127, 127, 127, lifespanF);
    int test6 = int(cp5.get(ScrollableList.class, "Midi6Ch").getValue());
    int midi6 = int(map(test6, 0, 16, -1, 15));

    if (countF > 0 && g6==1) { 
      // Draw a LIGHT BLUE square at Grid (1,1), IF movement detected
      fill(triggerF); 
      rect(1*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a LIGHT BLUE circle at Grid (1,1)
      avgXF = avgXF / countF; 
      avgYF = avgYF / countF; 
      fill(trackColorF); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXF, avgYF, 16, 16); 

      if ( in != null && midi6 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteF = map(int(avgXF), 0, video.width, 0, 127); 
        int noteF = int(midinoteF); 
        //float midivelocityF = map(int(avgYF), 0, height, 0, 127); 
        //int velocityF = int(midivelocityF); 
        busA.sendNoteOn(midi6, noteF, mic); 
        println("MidiF: " + midi6, noteF, mic);
      }
    } else if (countF <= 0 && g6==1) {

      lifeF = lifeF + AddLifeF;
      if (lifeF > 127) {
        AddLifeF = -1;
      }
      if (lifeF < 0) {
        AddLifeF = 1;
      }

      // Draw a square at Grid (1,1)
      fill(triggerF); 
      rect(1*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi6, lifeF, 0);
    }

    /////////////////////////////////////////

    if (countG > 0) {
      lifespanG = maxLife;
    }
    if (lifespanG <= maxLife) {
      lifespanG--;
    }
    if (lifespanG == minLife) {
      lifespanG = 0;
    }
    int triggerG = color(127, 127, 127, lifespanG); 
    int test7 = int(cp5.get(ScrollableList.class, "Midi7Ch").getValue());
    int midi7 = int(map(test7, 0, 16, -1, 15));

    //////   Average Color Tracking    //////
    if (countG > 0 && g7==1) { 
      // Draw a ORANGE square at Grid (2,1), IF movement detected
      fill(triggerG); 
      rect(2*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a ORANGE circle at Grid (2,1)
      avgXG = avgXG / countG; 
      avgYG = avgYG / countG; 
      fill(trackColorG); 
      strokeWeight(0.05); 
      stroke(1); 
      ellipse(avgXG, avgYG, 16, 16); 

      if ( in != null && midi7 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteG = map(int(avgXG), 0, video.width, 0, 127); 
        int noteG = int(midinoteG); 
        //float midivelocityG = map(int(avgYG), 0, height, 0, 127); 
        //int velocityG = int(midivelocityG); 
        busA.sendNoteOn(midi7, noteG, mic); 
        println("MidiG: " + midi7, noteG, mic);
      }
    } else if (countG <= 0 && g7==1) {

      lifeG = lifeG + AddLifeG;
      if (lifeG > 127) {
        AddLifeG = -1;
      }
      if (lifeG < 0) {
        AddLifeG = 1;
      }

      // Draw a square at Grid (2,1)
      fill(triggerG); 
      rect(2*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi7, lifeG, 0);
    }

    /////////////////////////////////////////

    if (countH > 0) {
      lifespanH = maxLife;
    }
    if (lifespanH <= maxLife) {
      lifespanH--;
    }
    if (lifespanH == minLife) {
      lifespanH = 0;
    }
    int triggerH = color(127, 127, 127, lifespanH); 
    int test8 = int(cp5.get(ScrollableList.class, "Midi8Ch").getValue());
    int midi8 = int(map(test8, 0, 16, -1, 15));

    if (countH > 0 && g8==1) { 
      // Draw a DARK PINK square at Grid (3,1), IF movement detected
      fill(triggerH); 
      rect(3*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a DARK PINK circle at Grid (3,1)
      avgXH = avgXH / countH; 
      avgYH = avgYH / countH; 
      fill(trackColorH); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXH, avgYH, 16, 16); 

      if ( in != null && midi8 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteH = map(int(avgXH), 0, video.width, 0, 127); 
        int noteH = int(midinoteH); 
        //float midivelocityH = map(int(avgYH), 0, height, 0, 127); 
        //int velocityH = int(midivelocityH); 
        busA.sendNoteOn(midi8, noteH, mic); 
        println("MidiH: " + midi8, noteH, mic);
      }
    } else if (countH <= 0 && g8==1) {

      lifeH = lifeH + AddLifeH;
      if (lifeH > 127) {
        AddLifeH = -1;
      }
      if (lifeH < 0) {
        AddLifeH = 1;
      }

      // Draw a square at Grid (3,1)
      fill(triggerH); 
      rect(3*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi8, lifeH, 0);
    }

    /////////////////////////////////////////

    if (countI > 0) {
      lifespanI = maxLife;
    }
    if (lifespanI <= maxLife) {
      lifespanI--;
    }
    if (lifespanI == minLife) {
      lifespanI = 0;
    }
    int triggerI = color(127, 127, 127, lifespanI); 
    int test9 = int(cp5.get(ScrollableList.class, "Midi9Ch").getValue());
    int midi9 = int(map(test9, 0, 16, -1, 15));

    if (countI > 0 && g9==1) { 
      // Draw a LIGHT GREEN square at Grid (0,2), IF movement detected
      fill(triggerI); 
      rect(0*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a LIGHT GREEN circle at Grid (0,2)
      avgXI = avgXI / countI; 
      avgYI = avgYI / countI; 
      fill(trackColorI); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXI, avgYI, 16, 16); 

      if ( in != null && midi9 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteI = map(int(avgXI), 0, video.width, 0, 127); 
        int noteI = int(midinoteI); 
        //float midivelocityI = map(int(avgYI), 0, height, 0, 127); 
        //int velocityI = int(midivelocityI); 
        busA.sendNoteOn(midi9, noteI, mic); 
        println("MidiI: " + midi9, noteI, mic);
      }
    } else if (countI <= 0 && g9==1) {

      lifeI = lifeI + AddLifeI;
      if (lifeI > 127) {
        AddLifeI = -1;
      }
      if (lifeI < 0) {
        AddLifeI = 1;
      }

      // Draw a square at Grid (0,2)
      fill(triggerI); 
      rect(0*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi9, lifeI, 0);
    }

    /////////////////////////////////////////

    if (countJ > 0) {
      lifespanJ = maxLife;
    }
    if (lifespanJ <= maxLife) {
      lifespanJ--;
    }
    if (lifespanJ == minLife) {
      lifespanJ = 0;
    }
    int triggerJ = color(127, 127, 127, lifespanJ); 
    int test10 = int(cp5.get(ScrollableList.class, "Midi10Ch").getValue());
    int midi10 = int(map(test10, 0, 16, -1, 15));

    if (countJ > 0 && g10==1) { 
      // Draw a PALE GREEN square at Grid (1,2), IF movement detected
      fill(triggerJ); 
      rect(1*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a PALE GREEN circle at Grid (1,2)
      avgXJ = avgXJ / countJ; 
      avgYJ = avgYJ / countJ; 
      fill(trackColorJ); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXJ, avgYJ, 16, 16); 

      if ( in != null && midi10 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteJ = map(int(avgXJ), 0, video.width, 0, 127); 
        int noteJ = int(midinoteJ); 
        //float midivelocityJ = map(int(avgYJ), 0, height, 0, 127); 
        //int velocityJ = int(midivelocityJ); 
        busA.sendNoteOn(midi10, noteJ, mic); 
        println("MidiJ: " + midi10, noteJ, mic);
      }
    } else if (countJ <= 0 && g10==1) {

      lifeJ = lifeJ + AddLifeJ;
      if (lifeJ > 127) {
        AddLifeJ = -1;
      }
      if (lifeJ < 0) {
        AddLifeJ = 1;
      }

      // Draw a square at Grid (1,2)
      fill(triggerC); 
      rect(1*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi10, lifeJ, 0);
    }

    /////////////////////////////////////////

    if (countK > 0) {
      lifespanK = maxLife;
    }
    if (lifespanK <= maxLife) {
      lifespanK--;
    }
    if (lifespanK == minLife) {
      lifespanK = 0;
    }
    int triggerK = color(127, 127, 127, lifespanK);
    int test11 = int(cp5.get(ScrollableList.class, "Midi11Ch").getValue());
    int midi11 = int(map(test11, 0, 16, -1, 15));

    if (countK > 0 && g11==1) { 
      // Draw a PALE BLUE square at Grid (2,2), IF movement detected
      fill(triggerK); 
      rect(2*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a PALE BLUE circle at Grid (2,2)
      avgXK = avgXK / countK; 
      avgYK = avgYK / countK; 
      fill(trackColorK); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXK, avgYK, 16, 16); 

      if ( in != null && midi11 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteK = map(int(avgXK), 0, video.width, 0, 127); 
        int noteK = int(midinoteK); 
        //float midivelocityK = map(int(avgYK), 0, height, 0, 127); 
        //int velocityK = int(midivelocityK); 
        busA.sendNoteOn(midi11, noteK, mic); 
        println("MidiK: " + midi11, noteK, mic);
      }
    } else if (countK <= 0  && g11==1) {

      lifeK = lifeK + AddLifeK;
      if (lifeK > 127) {
        AddLifeK = -1;
      }
      if (lifeK < 0) {
        AddLifeK = 1;
      }

      // Draw a square at Grid (2,2)
      fill(triggerK); 
      rect(2*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi11, lifeK, 0);
    }

    /////////////////////////////////////////

    if (countL > 0) {
      lifespanL = maxLife;
    }
    if (lifespanL <= maxLife) {
      lifespanL--;
    }
    if (lifespanL == minLife) {
      lifespanL = 0;
    }
    int triggerL = color(127, 127, 127, lifespanL); 
    int test12 = int(cp5.get(ScrollableList.class, "Midi12Ch").getValue());
    int midi12 = int(map(test12, 0, 16, -1, 15));

    if (countL > 0 && g12==1) { 
      // Draw a PURPLE square at Grid (3,2), IF movement detected
      fill(triggerL); 
      rect(3*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a PURPLE circle at Grid (3,2)
      avgXL = avgXL / countL; 
      avgYL = avgYL / countL; 
      fill(trackColorL); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXL, avgYL, 16, 16); 

      if ( in != null && midi12 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        //Send Midi NoteOut
        float midinoteL = map(int(avgXL), 0, video.width, 0, 127); 
        int noteL = int(midinoteL); 
        //float midivelocityL = map(int(avgYL), 0, height, 0, 127); 
        //int velocityL = int(midivelocityL); 
        busA.sendNoteOn(midi12, noteL, mic); 
        println("MidiL: " + midi12, noteL, mic);
      }
    } else if (countL <= 0 && g12==1) {

      lifeL = lifeL + AddLifeL;
      if (lifeL > 127) {
        AddLifeL = -1;
      }
      if (lifeA < 0) {
        AddLifeL = 1;
      }

      // Draw a square at Grid (3,2)
      fill(triggerL); 
      rect(3*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi12, lifeL, 0);
    }
  }
  /////////////////////////////////////////


  //===========================================================================
  /////////////COLOR TRACKING//////////////

  if (instrument1 == true) {
    int test = int(cp5.get(Knob.class, "1midi").getValue());
    int midi1 = int(map(test, 0, 16, -1, 15));

    if (countA2 > 0) {
      lifespanA2 = maxLife;
    }
    if (lifespanA2 <= maxLife) {
      lifespanA2--;
    }
    if (lifespanA2 == minLife) {
      lifespanA2 = 0;
    }
    if (colorA < 0) { 
      // Draw a circle at the tracked pixel
      avgXA2 = avgXA2 / countA2;
      avgYA2 = avgYA2 / countA2;
      fill(colorA);
      strokeWeight(0.05);
      stroke(0);
      ellipse(avgXA2, avgYA2, 16, 16);

      if ( in != null && midi1 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        float midinoteA = map(int(avgXA2), 0, video.width, 0, 127);
        int noteA = int(midinoteA);
        busA.sendNoteOn(midi1, noteA, mic);
        println("MidiA2: " + midi1, noteA, mic);
      }
    } else if (colorA >= 0) {
      lifeA2 = lifeA2 + AddLifeA2;
      if (lifeA2 > 127) {
        AddLifeA2 = -1;
      }
      if (lifeA2 < 0) {
        AddLifeA2 = 1;
      }
      busA.sendNoteOff(midi1, lifeA2, 0);
    }

    int test2 = int(cp5.get(Knob.class, "2midi").getValue());
    int midi2 = int(map(test2, 0, 16, -1, 15));

    if (countB2 > 0) {
      lifespanB2 = maxLife;
    }
    if (lifespanB2 <= maxLife) {
      lifespanB2--;
    }
    if (lifespanB2 == minLife) {
      lifespanB2 = 0;
    }
    if (colorB < 0) { 
      // Draw a circle at the tracked pixel
      avgXB2 = avgXB2 / countB2;
      avgYB2 = avgYB2 / countB2;
      fill(colorB);
      strokeWeight(0.05);
      stroke(0);
      ellipse(avgXB2, avgYB2, 16, 16);

      if ( in != null && midi2 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        float midinoteB = map(int(avgXB2), 0, video.width, 0, 127);
        int noteB = int(midinoteB);
        busA.sendNoteOn(midi2, noteB, mic);
        println("MidiB2: " + midi2, noteB, mic);
      }
    } else if (colorB >= 0) {
      lifeB2 = lifeB2 + AddLifeB2;
      if (lifeB2 > 127) {
        AddLifeB2 = -1;
      }
      if (lifeB2 < 0) {
        AddLifeB2 = 1;
      }
      busA.sendNoteOff(midi2, lifeB2, 0);
    }

    int test3 = int(cp5.get(Knob.class, "3midi").getValue());
    int midi3 = int(map(test3, 0, 16, -1, 15));

    if (countC2 > 0) {
      lifespanC2 = maxLife;
    }
    if (lifespanC2 <= maxLife) {
      lifespanC2--;
    }
    if (lifespanC2 == minLife) {
      lifespanC2 = 0;
    }
    if (colorC < 0) { 
      // Draw a circle at the tracked pixel
      avgXC2 = avgXC2 / countC2;
      avgYC2 = avgYC2 / countC2;
      fill(colorC);
      strokeWeight(0.05);
      stroke(0);
      ellipse(avgXC2, avgYC2, 16, 16);

      if ( in != null && midi3 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        float midinoteC = map(int(avgXC2), 0, video.width, 0, 127);
        int noteC = int(midinoteC);
        busA.sendNoteOn(midi3, noteC, mic);
        println("MidiC2: " + midi3, noteC, mic);
      }
    } else if (colorC >= 0) {
      lifeC2 = lifeC2 + AddLifeC2;
      if (lifeC2 > 127) {
        AddLifeC2 = -1;
      }
      if (lifeC2 < 0) {
        AddLifeC2 = 1;
      }
      busA.sendNoteOff(midi3, lifeC2, 0);
    }


    int test4 = int(cp5.get(Knob.class, "4midi").getValue());
    int midi4 = int(map(test4, 0, 16, -1, 15));

    if (countD2 > 0) {
      lifespanD2 = maxLife;
    }
    if (lifespanD2 <= maxLife) {
      lifespanD2--;
    }
    if (lifespanD2 == minLife) {
      lifespanD2 = 0;
    }
    if (colorD < 0) { 
      // Draw a circle at the tracked pixel
      avgXD2 = avgXD2 / countD2;
      avgYD2 = avgYD2 / countD2;
      fill(colorD);
      strokeWeight(0.05);
      stroke(0);
      ellipse(avgXD2, avgYD2, 16, 16);

      if ( in != null && midi4 != -1) {

        int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
        float midinoteD = map(int(avgXD2), 0, video.width, 0, 127);
        int noteD = int(midinoteD);
        busA.sendNoteOn(midi4, noteD, mic);
        println("MidiD2: " + midi4, noteD, mic);
      }
    } else if (colorD >= 0) {
      lifeD2 = lifeD2 + AddLifeD2;
      if (lifeD2 > 127) {
        AddLifeD2 = -1;
      }
      if (lifeD2 < 0) {
        AddLifeD2 = 1;
      }
      busA.sendNoteOff(midi4, lifeD2, 0);
    }
  }
  fill(0);
  stroke(0);
  strokeWeight(1);
  line(0, 600, 320, 600);

  ///////////////   GRID    ///////////////
  // Begin loop for columns
  for (int i = 0; i < cols; i++) {
    // Begin loop for rows
    for (int j = 0; j < rows; j++) {
      // Scaling up to draw a rectangle at (x,y)
      int xgrid = 0 + i*4*videoScaleX; 
      int ygrid = 0 + j*3*videoScaleY; 
      noFill(); 
      stroke(0); 
      strokeWeight(1); 
      // For every column and row, a rectangle is drawn at an (x,y) location scaled and sized by videoScale.
      rect(xgrid, ygrid, 4*videoScaleX, 3*videoScaleY);
    }
  }

  //===========================================================================
  /////////////SILENT PREVIOUS FRAME//////////////
  //////MIDIBUS, NOTES AND VELOCITIES//////
  if (instrument3 == true) {
    if (countA > 0) {
      lifespanA = maxLife;
    }
    if (lifespanA <= maxLife) {
      lifespanA--;
    }
    if (lifespanA <= minLife) {
      lifespanA = 0;
    }
    int triggerA = color(127, 127, 127, lifespanA); 
    int test1 = int(cp5.get(ScrollableList.class, "Midi1Ch").getValue());
    int midi1 = int(map(test1, 0, 16, -1, 15));

    //////   Average Color Tracking    //////
    if (countA > 0 && g1==1) { 
      // Draw a RED square at Grid (0,0), IF movement detected
      fill(triggerA); 
      rect(0, 0, videoScaleX, videoScaleY); 
      // Draw a RED circle at Grid (0,0)
      avgXA = avgXA / countA; 
      avgYA = avgYA / countA; 
      fill(trackColorA); 
      strokeWeight(0.05); 
      stroke(1); 
      ellipse(avgXA, avgYA, 16, 16); 


      //Send Midi NoteOut
      float midinoteA = map(int(avgXA), 0, video.width, 0, 127); 
      int noteA = int(midinoteA); 
      float midivelocityA = map(int(avgYA), 0, height, 0, 127); 
      int velocityA = int(midivelocityA); 
      busA.sendNoteOn(midi1, noteA, velocityA); 
      println("MidiA: " + midi1, noteA, velocityA);
    } else if (countA <= 0 && g1==1) {

      lifeA = lifeA + AddLifeA;
      if (lifeA > 127) {
        AddLifeA = -1;
      }
      if (lifeA < 0) {
        AddLifeA = 1;
      }

      // Draw a square at Grid (0,0), IF movement detected
      fill(triggerA); 
      rect(0, 0, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi1, lifeA, 0);
    }

    /////////////////////////////////////////

    if (countB > 0) {
      lifespanB = maxLife;
    }
    if (lifespanB <= maxLife) {
      lifespanB--;
    }
    if (lifespanB == minLife) {
      lifespanB = 0;
    }
    int triggerB = color(127, 127, 127, lifespanB); 
    int test2 = int(cp5.get(ScrollableList.class, "Midi2Ch").getValue());
    int midi2 = int(map(test2, 0, 16, -1, 15));

    if (countB > 0 && g2==1) { 
      // Draw a GREEN square at Grid (1,0), IF movement detected
      fill(triggerB); 
      rect(0 + 1*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a GREEN circle at Grid (1,0)
      avgXB = avgXB / countB; 
      avgYB = avgYB / countB; 
      fill(trackColorB); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXB, avgYB, 16, 16); 

      //Send Midi NoteOut
      float midinoteB = map(int(avgXB), 0, video.width, 0, 127); 
      int noteB = int(midinoteB); 
      float midivelocityB = map(int(avgYB), 0, height, 0, 127); 
      int velocityB = int(midivelocityB); 
      busA.sendNoteOn(midi2, noteB, velocityB); 
      println("MidiB: " + midi2, noteB, velocityB);
    } else if (countB <= 0 && g2==1) {

      lifeB = lifeB + AddLifeB;
      if (lifeB > 127) {
        AddLifeB = -1;
      }
      if (lifeB < 0) {
        AddLifeB = 1;
      }

      // Draw a square at Grid (1,0)
      fill(triggerB); 
      rect(1*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi2, lifeB, 0);
    }

    /////////////////////////////////////////

    if (countC > 0) {
      lifespanC = maxLife;
    }
    if (lifespanC <= maxLife) {
      lifespanC--;
    }
    if (lifespanC == minLife) {
      lifespanC = 0;
    }
    int triggerC = color(127, 127, 127, lifespanC); 
    int test3 = int(cp5.get(ScrollableList.class, "Midi3Ch").getValue());
    int midi3 = int(map(test3, 0, 16, -1, 15));

    if (countC > 0 && g3==1) { 
      // Draw a BLUE square at Grid (2,0), IF movement detected
      fill(triggerC); 
      rect(2*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a BLUE circle at Grid (2,0)
      avgXC = avgXC / countC; 
      avgYC = avgYC / countC; 
      fill(trackColorC); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXC, avgYC, 16, 16); 

      //Send Midi NoteOut
      float midinoteC = map(int(avgXC), 0, video.width, 0, 127); 
      int noteC = int(midinoteC); 
      float midivelocityC = map(int(avgYC), 0, height, 0, 127); 
      int velocityC = int(midivelocityC); 
      busA.sendNoteOn(midi3, noteC, velocityC); 
      println("MidiC: " + midi3, noteC, velocityC);
    } else if (countC <= 0 && g3==1) {

      lifeC = lifeC + AddLifeC;
      if (lifeC > 127) {
        AddLifeC = -1;
      }
      if (lifeC < 0) {
        AddLifeC = 1;
      }

      // Draw a square at Grid (2,0)
      fill(triggerC); 
      rect(2*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi3, lifeC, 0);
    }

    /////////////////////////////////////////

    if (countD > 0) {
      lifespanD = maxLife;
    }
    if (lifespanD <= maxLife) {
      lifespanD--;
    }
    if (lifespanD == minLife) {
      lifespanD = 0;
    }
    int triggerD = color(127, 127, 127, lifespanD); 
    int test4 = int(cp5.get(ScrollableList.class, "Midi4Ch").getValue());
    int midi4 = int(map(test4, 0, 16, -1, 15));

    if (countD > 0 && g4==1) { 
      // Draw a PINK square at Grid (3,0), IF movement detected
      fill(triggerD); 
      rect(3*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a PINK circle at Grid (3,0)
      avgXD = avgXD / countD; 
      avgYD = avgYD / countD; 
      fill(trackColorD); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXD, avgYD, 16, 16); 

      //Send Midi NoteOut
      float midinoteD = map(int(avgXD), 0, video.width, 0, 127); 
      int noteD = int(midinoteD); 
      float midivelocityD = map(int(avgYD), 0, height, 0, 127); 
      int velocityD = int(midivelocityD); 
      busA.sendNoteOn(midi4, noteD, velocityD); 
      println("MidiD: " + midi4, noteD, velocityD);
    } else if (countD <= 0 && g4==1) {

      lifeD = lifeD + AddLifeD;
      if (lifeD > 127) {
        AddLifeD = -1;
      }
      if (lifeD < 0) {
        AddLifeD = 1;
      }

      // Draw a square at Grid (3,0)
      fill(triggerD); 
      rect(3*videoScaleX, 0*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi4, lifeD, 0);
    }

    /////////////////////////////////////////

    if (countE > 0) {
      lifespanE = maxLife;
    }
    if (lifespanE <= maxLife) {
      lifespanE--;
    }
    if (lifespanE == minLife) {
      lifespanE = 0;
    }
    int triggerE = color(127, 127, 127, lifespanE); 
    int test5 = int(cp5.get(ScrollableList.class, "Midi5Ch").getValue());
    int midi5 = int(map(test5, 0, 16, -1, 15));

    if (countE > 0 && g5==1) { 
      // Draw a YELLOW square at Grid (0,1), IF movement detected
      fill(triggerE); 
      rect(0*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a YELLOW circle at Grid (0,1)
      avgXE = avgXE / countE; 
      avgYE = avgYE / countE; 
      fill(trackColorE); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXE, avgYE, 16, 16); 

      //Send Midi NoteOut
      float midinoteE = map(int(avgXE), 0, video.width, 0, 127); 
      int noteE = int(midinoteE); 
      float midivelocityE = map(int(avgYE), 0, height, 0, 127); 
      int velocityE = int(midivelocityE); 
      busA.sendNoteOn(midi5, noteE, velocityE); 
      println("MidiE: " + midi5, noteE, velocityE);
    } else if (countE <= 0 && g5==1) {

      lifeE = lifeE + AddLifeE;
      if (lifeE > 127) {
        AddLifeE = -1;
      }
      if (lifeE < 0) {
        AddLifeE = 1;
      }

      // Draw a square at Grid (0,1)
      fill(triggerE); 
      rect(0*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi5, lifeE, 0);
    }

    /////////////////////////////////////////

    if (countF > 0) {
      lifespanF = maxLife;
    }
    if (lifespanF <= maxLife) {
      lifespanF--;
    }
    if (lifespanF == minLife) {
      lifespanF = 0;
    }
    int triggerF = color(127, 127, 127, lifespanF);
    int test6 = int(cp5.get(ScrollableList.class, "Midi6Ch").getValue());
    int midi6 = int(map(test6, 0, 16, -1, 15));

    if (countF > 0 && g6==1) { 
      // Draw a LIGHT BLUE square at Grid (1,1), IF movement detected
      fill(triggerF); 
      rect(1*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a LIGHT BLUE circle at Grid (1,1)
      avgXF = avgXF / countF; 
      avgYF = avgYF / countF; 
      fill(trackColorF); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXF, avgYF, 16, 16); 

      //Send Midi NoteOut
      float midinoteF = map(int(avgXF), 0, video.width, 0, 127); 
      int noteF = int(midinoteF); 
      float midivelocityF = map(int(avgYF), 0, height, 0, 127); 
      int velocityF = int(midivelocityF); 
      busA.sendNoteOn(midi6, noteF, velocityF); 
      println("MidiF: " + midi6, noteF, velocityF);
    } else if (countF <= 0 && g6==1) {

      lifeF = lifeF + AddLifeF;
      if (lifeF > 127) {
        AddLifeF = -1;
      }
      if (lifeF < 0) {
        AddLifeF = 1;
      }

      // Draw a square at Grid (1,1)
      fill(triggerF); 
      rect(1*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi6, lifeF, 0);
    }

    /////////////////////////////////////////

    if (countG > 0) {
      lifespanG = maxLife;
    }
    if (lifespanG <= maxLife) {
      lifespanG--;
    }
    if (lifespanG == minLife) {
      lifespanG = 0;
    }
    int triggerG = color(127, 127, 127, lifespanG); 
    int test7 = int(cp5.get(ScrollableList.class, "Midi7Ch").getValue());
    int midi7 = int(map(test7, 0, 16, -1, 15));

    //////   Average Color Tracking    //////
    if (countG > 0 && g7==1) { 
      // Draw a ORANGE square at Grid (2,1), IF movement detected
      fill(triggerG); 
      rect(2*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a ORANGE circle at Grid (2,1)
      avgXG = avgXG / countG; 
      avgYG = avgYG / countG; 
      fill(trackColorG); 
      strokeWeight(0.05); 
      stroke(1); 
      ellipse(avgXG, avgYG, 16, 16); 

      //Send Midi NoteOut
      float midinoteG = map(int(avgXG), 0, video.width, 0, 127); 
      int noteG = int(midinoteG); 
      float midivelocityG = map(int(avgYG), 0, height, 0, 127); 
      int velocityG = int(midivelocityG); 
      busA.sendNoteOn(midi7, noteG, velocityG); 
      println("MidiG: " + midi7, noteG, velocityG);
    } else if (countG <= 0 && g7==1) {

      lifeG = lifeG + AddLifeG;
      if (lifeG > 127) {
        AddLifeG = -1;
      }
      if (lifeG < 0) {
        AddLifeG = 1;
      }

      // Draw a square at Grid (2,1)
      fill(triggerG); 
      rect(2*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi7, lifeG, 0);
    }

    /////////////////////////////////////////

    if (countH > 0) {
      lifespanH = maxLife;
    }
    if (lifespanH <= maxLife) {
      lifespanH--;
    }
    if (lifespanH == minLife) {
      lifespanH = 0;
    }
    int triggerH = color(127, 127, 127, lifespanH); 
    int test8 = int(cp5.get(ScrollableList.class, "Midi8Ch").getValue());
    int midi8 = int(map(test8, 0, 16, -1, 15));

    if (countH > 0 && g8==1) { 
      // Draw a DARK PINK square at Grid (3,1), IF movement detected
      fill(triggerH); 
      rect(3*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a DARK PINK circle at Grid (3,1)
      avgXH = avgXH / countH; 
      avgYH = avgYH / countH; 
      fill(trackColorH); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXH, avgYH, 16, 16); 

      //Send Midi NoteOut
      float midinoteH = map(int(avgXH), 0, video.width, 0, 127); 
      int noteH = int(midinoteH); 
      //float midivelocityH = map(int(avgYH), 0, height, 0, 127); 
      //int velocityH = int(midivelocityH); 
      busA.sendNoteOn(midi8, noteH, velocityH); 
      println("MidiH: " + midi8, noteH, velocityH);
    } else if (countH <= 0 && g8==1) {

      lifeH = lifeH + AddLifeH;
      if (lifeH > 127) {
        AddLifeH = -1;
      }
      if (lifeH < 0) {
        AddLifeH = 1;
      }

      // Draw a square at Grid (3,1)
      fill(triggerH); 
      rect(3*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi8, lifeH, 0);
    }

    /////////////////////////////////////////

    if (countI > 0) {
      lifespanI = maxLife;
    }
    if (lifespanI <= maxLife) {
      lifespanI--;
    }
    if (lifespanI == minLife) {
      lifespanI = 0;
    }
    int triggerI = color(127, 127, 127, lifespanI); 
    int test9 = int(cp5.get(ScrollableList.class, "Midi9Ch").getValue());
    int midi9 = int(map(test9, 0, 16, -1, 15));

    if (countI > 0 && g9==1) { 
      // Draw a LIGHT GREEN square at Grid (0,2), IF movement detected
      fill(triggerI); 
      rect(0*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a LIGHT GREEN circle at Grid (0,2)
      avgXI = avgXI / countI; 
      avgYI = avgYI / countI; 
      fill(trackColorI); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXI, avgYI, 16, 16); 

      //Send Midi NoteOut
      float midinoteI = map(int(avgXI), 0, video.width, 0, 127); 
      int noteI = int(midinoteI); 
      float midivelocityI = map(int(avgYI), 0, height, 0, 127); 
      int velocityI = int(midivelocityI); 
      busA.sendNoteOn(midi9, noteI, velocityI); 
      println("MidiI: " + midi9, noteI, velocityI);
    } else if (countI <= 0 && g9==1) {

      lifeI = lifeI + AddLifeI;
      if (lifeI > 127) {
        AddLifeI = -1;
      }
      if (lifeI < 0) {
        AddLifeI = 1;
      }

      // Draw a square at Grid (0,2)
      fill(triggerI); 
      rect(0*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi9, lifeI, 0);
    }

    /////////////////////////////////////////

    if (countJ > 0) {
      lifespanJ = maxLife;
    }
    if (lifespanJ <= maxLife) {
      lifespanJ--;
    }
    if (lifespanJ == minLife) {
      lifespanJ = 0;
    }
    int triggerJ = color(127, 127, 127, lifespanJ); 
    int test10 = int(cp5.get(ScrollableList.class, "Midi10Ch").getValue());
    int midi10 = int(map(test10, 0, 16, -1, 15));

    if (countJ > 0 && g10==1) { 
      // Draw a PALE GREEN square at Grid (1,2), IF movement detected
      fill(triggerJ); 
      rect(1*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a PALE GREEN circle at Grid (1,2)
      avgXJ = avgXJ / countJ; 
      avgYJ = avgYJ / countJ; 
      fill(trackColorJ); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXJ, avgYJ, 16, 16); 

      //Send Midi NoteOut
      float midinoteJ = map(int(avgXJ), 0, video.width, 0, 127); 
      int noteJ = int(midinoteJ); 
      float midivelocityJ = map(int(avgYJ), 0, height, 0, 127); 
      int velocityJ = int(midivelocityJ); 
      busA.sendNoteOn(midi10, noteJ, velocityJ); 
      println("MidiJ: " + midi10, noteJ, velocityJ);
    } else if (countJ <= 0 && g10==1) {

      lifeJ = lifeJ + AddLifeJ;
      if (lifeJ > 127) {
        AddLifeJ = -1;
      }
      if (lifeJ < 0) {
        AddLifeJ = 1;
      }

      // Draw a square at Grid (1,2)
      fill(triggerC); 
      rect(1*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi10, lifeJ, 0);
    }

    /////////////////////////////////////////

    if (countK > 0) {
      lifespanK = maxLife;
    }
    if (lifespanK <= maxLife) {
      lifespanK--;
    }
    if (lifespanK == minLife) {
      lifespanK = 0;
    }
    int triggerK = color(127, 127, 127, lifespanK);
    int test11 = int(cp5.get(ScrollableList.class, "Midi11Ch").getValue());
    int midi11 = int(map(test11, 0, 16, -1, 15));

    if (countK > 0 && g11==1) { 
      // Draw a PALE BLUE square at Grid (2,2), IF movement detected
      fill(triggerK); 
      rect(2*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a PALE BLUE circle at Grid (2,2)
      avgXK = avgXK / countK; 
      avgYK = avgYK / countK; 
      fill(trackColorK); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXK, avgYK, 16, 16); 

      //Send Midi NoteOut
      float midinoteK = map(int(avgXK), 0, video.width, 0, 127); 
      int noteK = int(midinoteK); 
      float midivelocityK = map(int(avgYK), 0, height, 0, 127); 
      int velocityK = int(midivelocityK); 
      busA.sendNoteOn(midi11, noteK, velocityK); 
      println("MidiK: " + midi11, noteK, velocityK);
    } else if (countK <= 0  && g11==1) {

      lifeK = lifeK + AddLifeK;
      if (lifeK > 127) {
        AddLifeK = -1;
      }
      if (lifeK < 0) {
        AddLifeK = 1;
      }

      // Draw a square at Grid (2,2)
      fill(triggerK); 
      rect(2*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi11, lifeK, 0);
    }

    /////////////////////////////////////////

    if (countL > 0) {
      lifespanL = maxLife;
    }
    if (lifespanL <= maxLife) {
      lifespanL--;
    }
    if (lifespanL == minLife) {
      lifespanL = 0;
    }
    int triggerL = color(127, 127, 127, lifespanL); 
    int test12 = int(cp5.get(ScrollableList.class, "Midi12Ch").getValue());
    int midi12 = int(map(test12, 0, 16, -1, 15));

    if (countL > 0 && g12==1) { 
      // Draw a PURPLE square at Grid (3,2), IF movement detected
      fill(triggerL); 
      rect(3*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      // Draw a PURPLE circle at Grid (3,2)
      avgXL = avgXL / countL; 
      avgYL = avgYL / countL; 
      fill(trackColorL); 
      strokeWeight(0.05); 
      stroke(0); 
      ellipse(avgXL, avgYL, 16, 16); 

      //Send Midi NoteOut
      float midinoteL = map(int(avgXL), 0, video.width, 0, 127); 
      int noteL = int(midinoteL); 
      float midivelocityL = map(int(avgYL), 0, height, 0, 127); 
      int velocityL = int(midivelocityL); 
      busA.sendNoteOn(midi12, noteL, velocityL); 
      println("MidiL: " + midi12, noteL, velocityL);
    } else if (countL <= 0 && g12==1) {

      lifeL = lifeL + AddLifeL;
      if (lifeL > 127) {
        AddLifeL = -1;
      }
      if (lifeL < 0) {
        AddLifeL = 1;
      }

      // Draw a square at Grid (3,2)
      fill(triggerL); 
      rect(3*videoScaleX, 2*videoScaleY, videoScaleX, videoScaleY); 
      busA.sendNoteOff(midi12, lifeL, 0);
    }
  }























  //===========================================================================
  /////////////     MANI     //////////////
  /////////////////////////////////////////
  if (Mani == true) {
    if (countA > 0) {                
      lifespanA = maxLife;
    }
    if (lifespanA <= maxLife) {    
      lifespanA--;
    }
    if (lifespanA <= minLife) {    
      lifespanA = 0;
    }
    if (countB > 0) {                
      lifespanB = maxLife;
    }
    if (lifespanB <= maxLife) {    
      lifespanB--;
    }
    if (lifespanB <= minLife) {    
      lifespanB = 0;
    }
    if (countC > 0) {                
      lifespanC = maxLife;
    }
    if (lifespanC <= maxLife) {    
      lifespanC--;
    }
    if (lifespanC <= minLife) {    
      lifespanC = 0;
    }
    if (countD > 0) {                
      lifespanD = maxLife;
    }
    if (lifespanD <= maxLife) {    
      lifespanD--;
    }
    if (lifespanD <= minLife) {    
      lifespanD = 0;
    }
    if (countE > 0) {                
      lifespanE = maxLife;
    }
    if (lifespanE <= maxLife) {    
      lifespanE--;
    }
    if (lifespanE <= minLife) {    
      lifespanE = 0;
    }
    if (countF > 0) {                
      lifespanF = maxLife;
    }
    if (lifespanF <= maxLife) {    
      lifespanF--;
    }
    if (lifespanF <= minLife) {    
      lifespanF = 0;
    }
    if (countG > 0) {                
      lifespanG = maxLife;
    }
    if (lifespanG <= maxLife) {    
      lifespanG--;
    }
    if (lifespanG <= minLife) {    
      lifespanG = 0;
    }
    if (countH > 0) {                
      lifespanH = maxLife;
    }
    if (lifespanH <= maxLife) {    
      lifespanH--;
    }
    if (lifespanH <= minLife) {    
      lifespanH = 0;
    }
    if (countI > 0) {                
      lifespanI = maxLife;
    }
    if (lifespanI <= maxLife) {    
      lifespanI--;
    }
    if (lifespanI <= minLife) {    
      lifespanI = 0;
    }
    if (countJ > 0) {                
      lifespanJ = maxLife;
    }
    if (lifespanJ <= maxLife) {    
      lifespanJ--;
    }
    if (lifespanJ <= minLife) {    
      lifespanJ = 0;
    }
    if (countK > 0) {                
      lifespanK = maxLife;
    }
    if (lifespanK <= maxLife) {    
      lifespanK--;
    }
    if (lifespanK <= minLife) {    
      lifespanK = 0;
    }
    if (countL > 0) {                
      lifespanL = maxLife;
    }
    if (lifespanL <= maxLife) {    
      lifespanL--;
    }
    if (lifespanL <= minLife) {    
      lifespanL = 0;
    }
    int triggerA = color(255, lifespanA); 
    int test1 = int(cp5.get(ScrollableList.class, "Midi1Ch").getValue());
    int midi1 = int(map(test1, 0, 16, -1, 15));
    int triggerB = color(255, lifespanB); 
    int test2 = int(cp5.get(ScrollableList.class, "Midi2Ch").getValue());
    int midi2 = int(map(test2, 0, 16, -1, 15));
    int triggerC = color(255, lifespanC); 
    int test3 = int(cp5.get(ScrollableList.class, "Midi3Ch").getValue());
    int midi3 = int(map(test3, 0, 16, -1, 15));
    int triggerD = color(255, lifespanD); 
    int test4 = int(cp5.get(ScrollableList.class, "Midi4Ch").getValue());
    int midi4 = int(map(test4, 0, 16, -1, 15));
    int triggerE = color(255, lifespanE); 
    int test5 = int(cp5.get(ScrollableList.class, "Midi5Ch").getValue());
    int midi5 = int(map(test5, 0, 16, -1, 15));
    int triggerF = color(255, lifespanF); 
    int test6 = int(cp5.get(ScrollableList.class, "Midi6Ch").getValue());
    int midi6 = int(map(test6, 0, 16, -1, 15));
    int triggerG = color(255, lifespanG); 
    int test7 = int(cp5.get(ScrollableList.class, "Midi7Ch").getValue());
    int midi7 = int(map(test7, 0, 16, -1, 15));
    int triggerH = color(255, lifespanH); 
    int test8 = int(cp5.get(ScrollableList.class, "Midi8Ch").getValue());
    int midi8 = int(map(test8, 0, 16, -1, 15));
    int triggerI = color(255, lifespanI); 
    int test9 = int(cp5.get(ScrollableList.class, "Midi9Ch").getValue());
    int midi9 = int(map(test9, 0, 16, -1, 15));
    int triggerJ = color(255, lifespanJ); 
    int test10 = int(cp5.get(ScrollableList.class, "Midi10Ch").getValue());
    int midi10 = int(map(test10, 0, 16, -1, 15));
    int triggerK = color(255, lifespanK); 
    int test11 = int(cp5.get(ScrollableList.class, "Midi11Ch").getValue());
    int midi11 = int(map(test11, 0, 16, -1, 15));
    int triggerL = color(255, lifespanL); 
    int test12 = int(cp5.get(ScrollableList.class, "Midi12Ch").getValue());
    int midi12 = int(map(test12, 0, 16, -1, 15));


    //aa = 0;



    if (aa == 0) {
      cp5.get(Toggle.class, "toggleInstrument1").setValue(false);
      cp5.get(Toggle.class, "toggleInstrument2").setValue(false);
      cp5.get(Toggle.class, "Grid1").setValue(false);
      cp5.get(Toggle.class, "Grid2").setValue(false);
      cp5.get(Toggle.class, "Grid3").setValue(false);
      cp5.get(Toggle.class, "Grid4").setValue(false);
      cp5.get(Toggle.class, "Grid5").setValue(false);
      cp5.get(Toggle.class, "Grid6").setValue(false);
      cp5.get(Toggle.class, "Grid7").setValue(false);
      cp5.get(Toggle.class, "Grid8").setValue(false);
      cp5.get(Toggle.class, "Grid9").setValue(false);
      cp5.get(Toggle.class, "Grid10").setValue(false);
      cp5.get(Toggle.class, "Grid11").setValue(false);
      cp5.get(Toggle.class, "Grid12").setValue(false);
      cp5.get(ScrollableList.class, "Midi1Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi2Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi3Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi4Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi5Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi6Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi7Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi8Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi9Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi10Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi11Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi12Ch").setValue(0);
      cp5.get(Knob.class, "1midi").setValue(0);
      cp5.get(Knob.class, "2midi").setValue(0);
      cp5.get(Knob.class, "3midi").setValue(0);
      cp5.get(Knob.class, "4midi").setValue(0);

      aa = 1;
    }

    if (aa == 1) {
      cp5.get(ScrollableList.class, "Midi8Ch").setValue(1);
      cp5.get(Toggle.class, "Grid8").setValue(true);
      int aaa = 0;

      if (aaa == 0) {

        if (countH > 0 && g8==1) { 
          // Draw a square at Grid8 IF movement detected
          fill(triggerH); 
          rect(3*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
          //Send E3
          busA.sendNoteOn(midi8, 64, 97); 
          println("MidiA: " + midi8, 64, 97);
        } else if (countH <= 0 && g8==1) {
          if (lifeH > 127 || lifeH <0) {
            AddLifeH = -AddLifeH;
          }
          lifeH = lifeH + AddLifeH; 


          // Draw a square at Grid (0,0), IF movement detected
          fill(triggerH); 
          rect(3*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 

          busA.sendNoteOff(midi1, lifeH, 0);
        }
        if (triggerH == 0) {
          aaa = 1;
        }
      }
    }
  }


  //===========================================================================
  /////////////     NOTT     //////////////
  /////////////////////////////////////////
  if (Nott == true) {
    if (countA > 0) {                
      lifespanA = maxLife;
    }
    if (lifespanA <= maxLife) {    
      lifespanA--;
    }
    if (lifespanA <= minLife) {    
      lifespanA = 0;
    }
    if (countB > 0) {                
      lifespanB = maxLife;
    }
    if (lifespanB <= maxLife) {    
      lifespanB--;
    }
    if (lifespanB <= minLife) {    
      lifespanB = 0;
    }
    if (countC > 0) {                
      lifespanC = maxLife;
    }
    if (lifespanC <= maxLife) {    
      lifespanC--;
    }
    if (lifespanC <= minLife) {    
      lifespanC = 0;
    }
    if (countD > 0) {                
      lifespanD = maxLife;
    }
    if (lifespanD <= maxLife) {    
      lifespanD--;
    }
    if (lifespanD <= minLife) {    
      lifespanD = 0;
    }
    if (countE > 0) {                
      lifespanE = maxLife;
    }
    if (lifespanE <= maxLife) {    
      lifespanE--;
    }
    if (lifespanE <= minLife) {    
      lifespanE = 0;
    }
    if (countF > 0) {                
      lifespanF = maxLife;
    }
    if (lifespanF <= maxLife) {    
      lifespanF--;
    }
    if (lifespanF <= minLife) {    
      lifespanF = 0;
    }
    if (countG > 0) {                
      lifespanG = maxLife;
    }
    if (lifespanG <= maxLife) {    
      lifespanG--;
    }
    if (lifespanG <= minLife) {    
      lifespanG = 0;
    }
    if (countH > 0) {                
      lifespanH = maxLife;
    }
    if (lifespanH <= maxLife) {    
      lifespanH--;
    }
    if (lifespanH <= minLife) {    
      lifespanH = 0;
    }
    if (countI > 0) {                
      lifespanI = maxLife;
    }
    if (lifespanI <= maxLife) {    
      lifespanI--;
    }
    if (lifespanI <= minLife) {    
      lifespanI = 0;
    }
    if (countJ > 0) {                
      lifespanJ = maxLife;
    }
    if (lifespanJ <= maxLife) {    
      lifespanJ--;
    }
    if (lifespanJ <= minLife) {    
      lifespanJ = 0;
    }
    if (countK > 0) {                
      lifespanK = maxLife;
    }
    if (lifespanK <= maxLife) {    
      lifespanK--;
    }
    if (lifespanK <= minLife) {    
      lifespanK = 0;
    }
    if (countL > 0) {                
      lifespanL = maxLife;
    }
    if (lifespanL <= maxLife) {    
      lifespanL--;
    }
    if (lifespanL <= minLife) {    
      lifespanL = 0;
    }
    int triggerA = color(255, lifespanA); 
    int test1 = int(cp5.get(ScrollableList.class, "Midi1Ch").getValue());
    int midi1 = int(map(test1, 0, 16, -1, 15));
    int triggerB = color(255, lifespanB); 
    int test2 = int(cp5.get(ScrollableList.class, "Midi2Ch").getValue());
    int midi2 = int(map(test2, 0, 16, -1, 15));
    int triggerC = color(255, lifespanC); 
    int test3 = int(cp5.get(ScrollableList.class, "Midi3Ch").getValue());
    int midi3 = int(map(test3, 0, 16, -1, 15));
    int triggerD = color(255, lifespanD); 
    int test4 = int(cp5.get(ScrollableList.class, "Midi4Ch").getValue());
    int midi4 = int(map(test4, 0, 16, -1, 15));
    int triggerE = color(255, lifespanE); 
    int test5 = int(cp5.get(ScrollableList.class, "Midi5Ch").getValue());
    int midi5 = int(map(test5, 0, 16, -1, 15));
    int triggerF = color(255, lifespanF); 
    int test6 = int(cp5.get(ScrollableList.class, "Midi6Ch").getValue());
    int midi6 = int(map(test6, 0, 16, -1, 15));
    int triggerG = color(255, lifespanG); 
    int test7 = int(cp5.get(ScrollableList.class, "Midi7Ch").getValue());
    int midi7 = int(map(test7, 0, 16, -1, 15));
    int triggerH = color(255, lifespanH); 
    int test8 = int(cp5.get(ScrollableList.class, "Midi8Ch").getValue());
    int midi8 = int(map(test8, 0, 16, -1, 15));
    int triggerI = color(255, lifespanI); 
    int test9 = int(cp5.get(ScrollableList.class, "Midi9Ch").getValue());
    int midi9 = int(map(test9, 0, 16, -1, 15));
    int triggerJ = color(255, lifespanJ); 
    int test10 = int(cp5.get(ScrollableList.class, "Midi10Ch").getValue());
    int midi10 = int(map(test10, 0, 16, -1, 15));
    int triggerK = color(255, lifespanK); 
    int test11 = int(cp5.get(ScrollableList.class, "Midi11Ch").getValue());
    int midi11 = int(map(test11, 0, 16, -1, 15));
    int triggerL = color(255, lifespanL); 
    int test12 = int(cp5.get(ScrollableList.class, "Midi12Ch").getValue());
    int midi12 = int(map(test12, 0, 16, -1, 15));

    //Buttons
    if (play == false) {
      fill(0);
      rect(0, 0, 80, 40);
      textSize(24);
      textAlign(CENTER, CENTER);
      fill(255);
      text("ALL", 40, 15);
      fill(0, 255, 0);
      text("PLAY", 40, 0.75*videoScaleY);
    } else {
      fill(0, 255, 0);
      rect(0, 0, 80, 40);
      textSize(24);
      textAlign(CENTER, CENTER);
      fill(255);
      text("ALL", 40, 15);
      fill(0, 255, 0);
      text("PLAY", 40, 0.75*videoScaleY);
    }
    if (lifespanA == 0) {
      fill(255);
      ellipse(5, 5, 7, 7);
    }
    //////////
    if (stop == false) {
      fill(0);
      rect(80, 0, 80, 40);
      textSize(24);
      textAlign(CENTER, CENTER);
      fill(255);
      text("ALL", 120, 15);
      fill(255, 0, 0);
      text("STOP", 120, 0.75*videoScaleY);
    } else {
      fill(255, 0, 0);
      rect(80, 0, 80, 40);
      textSize(24);
      textAlign(CENTER, CENTER);
      fill(255);
      text("ALL", 120, 15);
      fill(255, 0, 0);
      text("STOP", 120, 0.75*videoScaleY);
    }
    if (lifespanB == 0) {
      fill(255);
      ellipse(5 + 1*videoScaleX, 5, 7, 7);
    }
    //////////
    if (overdub == false) {
      fill(0);
      rect(2*videoScaleX, 0, 80, 40);
      textSize(24);
      textAlign(CENTER, CENTER);
      fill(255);
      text("OVER", 40 + 2*videoScaleX, 15);
      fill(0, 0, 255);
      text("WRITE", 40 + 2*videoScaleX, 0.75*videoScaleY);
    } else {
      fill(0, 0, 255);
      rect(2*videoScaleX, 0, 80, 40);
      textSize(24);
      textAlign(CENTER, CENTER);
      fill(255);
      text("OVER", 40 + 2*videoScaleX, 15);
      fill(0, 0, 255);
      text("DUB", 40 + 2*videoScaleX, 0.75*videoScaleY);
    }
    if (lifespanC == 0) {
      fill(255);
      ellipse(5 + 2*videoScaleX, 5, 7, 7);
    }
    //////////
    if (rec == false) {
      record = false;
      fill(0);
      rect(240, 0, 80, 40);
      textSize(24);
      textAlign(CENTER, CENTER);
      fill(255);
      text("REC", 280, 15);
    } else {
      fill(255, 0, 0);
      rect(240, 0, 80, 40);
      textSize(24);
      textAlign(CENTER, CENTER);
      fill(255);
      text("REC", 280, 15);
    }
    if (lifespanD == 0) {
      fill(255);
      ellipse(5 +3*videoScaleX, 5, 7, 7);
    }
    //////////
    if (track1 == false) {
      fill(0);
      rect(0*videoScaleX, 2*videoScaleY, 80, 40);
      textSize(16);
      textAlign(CENTER, CENTER);
      fill(255);
      text("TRACK1", 0*videoScaleX + 40, 2*videoScaleY + 0.20*videoScaleY);
    } else {
      fill(255, 0, 0);
      rect(0*videoScaleX, 2*videoScaleY, 80, 40);
      textSize(20);
      textAlign(CENTER, CENTER);
      fill(255);
      text("TRACK1", 0*videoScaleX + 40, 2*videoScaleY + 0.20*videoScaleY);
    }
    if (lifespanI == 0) {
      fill(255);
      ellipse(5 +0*videoScaleX, 2*videoScaleY + 5, 7, 7);
    }
    //////////
    if (track2 == false) {
      fill(0);
      rect(1*videoScaleX, 2*videoScaleY, 80, 40);
      textSize(16);
      textAlign(CENTER, CENTER);
      fill(255);
      text("TRACK2", 1*videoScaleX + 40, 2*videoScaleY + 0.20*videoScaleY);
    } else {
      fill(255, 0, 0);
      rect(1*videoScaleX, 2*videoScaleY, 80, 40);
      textSize(20);
      textAlign(CENTER, CENTER);
      fill(255);
      text("TRACK2", 1*videoScaleX + 40, 2*videoScaleY + 0.20*videoScaleY);
    }
    if (lifespanJ == 0) {
      fill(255);
      ellipse(5 +1*videoScaleX, 2*videoScaleY + 5, 7, 7);
    }
    //////////
    if (track3 == false) {
      fill(0);
      rect(2*videoScaleX, 2*videoScaleY, 80, 40);
      textSize(16);
      textAlign(CENTER, CENTER);
      fill(255);
      text("TRACK3", 2*videoScaleX + 40, 2*videoScaleY + 0.20*videoScaleY);
    } else {
      fill(255, 0, 0);
      rect(2*videoScaleX, 2*videoScaleY, 80, 40);
      textSize(20);
      textAlign(CENTER, CENTER);
      fill(255);
      text("TRACK3", 2*videoScaleX + 40, 2*videoScaleY + 0.20*videoScaleY);
    }
    if (lifespanK == 0) {
      fill(255);
      ellipse(5 +2*videoScaleX, 2*videoScaleY + 5, 7, 7);
    }
    //////////
    if (track4 == false) {
      fill(0);
      rect(3*videoScaleX, 2*videoScaleY, 80, 40);
      textSize(16);
      textAlign(CENTER, CENTER);
      fill(255);
      text("TRACK4", 3*videoScaleX + 40, 2*videoScaleY + 0.20*videoScaleY);
    } else {
      fill(255, 0, 0);
      rect(3*videoScaleX, 2*videoScaleY, 80, 40);
      textSize(20);
      textAlign(CENTER, CENTER);
      fill(255);
      text("TRACK4", 3*videoScaleX + 40, 2*videoScaleY + 0.20*videoScaleY);
    }
    if (lifespanL == 0) {
      fill(255);
      ellipse(5 +3*videoScaleX, 2*videoScaleY + 5, 7, 7);
    }

    //Button Behaviour
    if (rec == false) {
      if (countA > 0) {
        play = true;
        stop = false;

        for (int e = 0; e < number1 - 1; e++) {
          player1.get(e).loop();
        }
        for (int e = 0; e < number2 - 1; e++) {
          player2.get(e).loop();
        }
        for (int e = 0; e < number3 - 1; e++) {
          player3.get(e).loop();
        }
        for (int e = 0; e < number4 - 1; e++) {
          player4.get(e).loop();
        }
      }
      if (lifespanA > button-10 && lifespanA < button) {
        lifespanA = 0;
        play = false;
      }
      //////////
      if (countB > 0) {
        stop = true;
        play = false;

        for (int e = 0; e < number1 - 1; e++) {
          player1.get(e).pause();
          player1.get(e).rewind();
        }
        for (int e = 0; e < number2 - 1; e++) {
          player2.get(e).pause();
          player2.get(e).rewind();
        }
        for (int e = 0; e < number3 - 1; e++) {
          player3.get(e).pause();
          player3.get(e).rewind();
        }
        for (int e = 0; e < number4 - 1; e++) {
          player4.get(e).pause();
          player4.get(e).rewind();
        }
      }
      if (lifespanB > button-10 && lifespanB < button) {
        lifespanB = 0;
        stop = false;
      }
    }
    //////////
    if (rec == false) {
      if (lifespanD == 0) {
        if (iioverdub == 0) {
          if (countC > 0) {
            overdub = true;
          }
          if (lifespanC > button-10 && lifespanC < button) {
            lifespanC = 0;      
            iioverdub = 1;
          }
        }

        if (iioverdub == 1) {
          if (countC > 0) {
            overdub = false;
          }
          if (lifespanC > button-10 && lifespanC < button) {
            lifespanC = 0;      
            iioverdub = 0;
          }
        }
      }
    }
    //////////
    /*
    REC BUTTON, ON/OFF, with some delay on movement detection.
     To increase response delay, decrease lifespanD value
     */
    if (iirec == 0) {
      if (countD > 0) {
        rec = true;
      }
      if (lifespanD > button-10 && lifespanD < button) {
        lifespanD = 0;      
        iirec = 1;
      }
    }

    if (iirec == 1) {
      if (countD > 0) {
        rec = false;
      }
      if (lifespanD > button-10 && lifespanD < button) {
        lifespanD = 0;      
        iirec = 0;
      }
    }
    //////////
    //ARM REC and REC blinker
    if (rec == true) {
      //Armed
      if (record == false) {
        textSize(24);
        textAlign(CENTER, CENTER);
        fill(255);
        text("ARM", 40 + 3*videoScaleX, 0.75*videoScaleY);
        if (track1 == true || track2 == true || track3 == true || track4 == true) {
          if ( in != null) {
            int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
            if (mic > micThreshold) {
              record = true;
            }
            println("Mic level: ", mic);
          }
        }
      } else {
        // blink every second
        if (millis() - rectimer > 1000) {
          recColor++;
          rectimer = millis();
        }
        fill(recColors[recColor % recColors.length]);
        ellipse(3*videoScaleX + 0.5*videoScaleX, 0.75*videoScaleY, 20, 20);

        ////Record Files and Assign them to each track
        if ( in != null) {
          int mic = int(map(in.left.level(), 0, 0.6, 0, 127));
          println("Mic level: ", mic);
          if (track1 == true) {
            if (recorded1 == false) {
              recorded1 = true;
              recorder1 = minim.createRecorder(in, "track1_" + nf(number1, 2) +".wav");
              recorder1.beginRecord();
              player1.add(minim.loadFile("track1_" + nf(number1, 2) +".wav"));
              number1++;
            }
          }
          if (track2 == true) {
            if (recorded2 == false) {
              recorded2 = true;
              recorder2 = minim.createRecorder(in, "track2_" + nf(number2, 2) +".wav");
              recorder2.beginRecord();
              player2.add(minim.loadFile("track2_" + nf(number2, 2) +".wav"));
              number2++;
            }
          }
          if (track3 == true) {
            if (recorded3 == false) {
              recorded3 = true;
              recorder3 = minim.createRecorder(in, "track3_" + nf(number3, 2) +".wav");
              recorder3.beginRecord();
              player3.add(minim.loadFile("track3_" + nf(number3, 2) +".wav"));
              number3++;
            }
          }
          if (track4 == true) {
            if (recorded4 == false) {
              recorded4 = true;
              recorder4 = minim.createRecorder(in, "track4_" + nf(number4, 2) +".wav");
              recorder4.beginRecord();
              number4++;
            }
          }
        }
      }
    }
    printArray("Player1: " + player1);
    printArray("Player2: " + player2);
    printArray("Player3: " + player3);
    printArray("Player4: " + player4);

    //OVERDUB and OVERWRITE
    if (record == false) {
      if (recorded1 == true) {
        recorded1 = false;
        recorder1.endRecord();
        recorder1.save();
        if (overdub == true) {
          player1.add(minim.loadFile("track1_" + nf(number1-1, 2) +".wav"));
          player1.get(number1-1).loop();
        } else if (overdub == false) {
          for (int e = 0; e < number1 - 1; e++) {
            player1.get(e).pause();
          }
          player1.clear();
          player1.add(minim.loadFile("track1_" + nf(number1-1, 2) +".wav"));
          player1.get(0).loop();
          number1 = 0;
        }
      }
      if (recorded2 == true) {
        recorded2 = false;      
        recorder2.endRecord();
        recorder2.save();
        if (overdub == true) {
          player2.add(minim.loadFile("track2_" + nf(number2-1, 2) +".wav"));
          player2.get(number2-1).loop();
        } else if (overdub == false) {
          for (int e = 0; e < number2 - 1; e++) {
            player2.get(e).pause();
          }
          player2.clear();
          player2.add(minim.loadFile("track2_" + nf(number2-1, 2) +".wav"));
          player2.get(0).loop();
          number2 = 0;
        }
      }      
      if (recorded3 == true) {
        recorded3 = false;      
        recorder3.endRecord();
        recorder3.save();
        if (overdub == true) {
          player3.add(minim.loadFile("track3_" + nf(number3-1, 2) +".wav"));
          player3.get(number3-1).loop();
        } else if (overdub == false) {
          for (int e = 0; e < number3 - 1; e++) {
            player3.get(e).pause();
          }
          player3.clear();
          player3.add(minim.loadFile("track3_" + nf(number3-1, 2) +".wav"));
          player3.get(0).loop();
          number3 = 0;
        }
      }
      if (recorded4 == true) {
        recorded4 = false;      
        recorder4.endRecord();
        recorder4.save();
        if (overdub == true) {
          player4.add(minim.loadFile("track4_" + nf(number4-1, 2) +".wav"));
          player4.get(number4-1).loop();
        } else if (overdub == false) {
          for (int e = 0; e < number4 - 1; e++) {
            player4.get(e).pause();
          }
          player4.clear();
          player4.add(minim.loadFile("track4_" + nf(number4-1, 2) +".wav"));
          player4.get(0).loop();
          number4 = 0;
        }
      }
    }

    //////////
    if (rec == false) {
      if (iitrack1 == 0) {
        if (lifespanJ == 0 || lifespanK == 0 || lifespanL == 0) {
          if (countI > 0) {
            track1 = true;
            track2 = false;
            track3 = false;
            track4 = false;
            //
            iitrack2 = 0;
            iitrack3 = 0;
            iitrack4 = 0;
          }
        }
        if (lifespanI > button-10 && lifespanI < button) {
          lifespanI = 0;      
          iitrack1 = 1;
        }
      }
      if (iitrack1 == 1) {
        if (countI > 0) {
          track1 = false;
        }
        if (lifespanI > button-10 && lifespanI < button) {
          lifespanI = 0;      
          iitrack1 = 0;
        }
      }
    }
    //////////
    if (rec == false) {
      if (iitrack2 == 0) {
        if (lifespanI == 0 || lifespanK == 0 || lifespanL == 0) {
          if (countJ > 0) {
            track1 = false;
            track2 = true;
            track3 = false;
            track4 = false;
            //
            iitrack1 = 0;
            iitrack3 = 0;
            iitrack4 = 0;
          }
        }
        if (lifespanJ > button-10 && lifespanJ < button) {
          lifespanJ = 0;      
          iitrack2 = 1;
        }
      }
      if (iitrack2 == 1) {
        if (countJ > 0) {
          track2 = false;
        }
        if (lifespanJ > button-10 && lifespanJ < button) {
          lifespanJ = 0;      
          iitrack2 = 0;
        }
      }
    }
    //////////
    if (rec == false) {
      if (iitrack3 == 0) {
        if (lifespanI == 0 || lifespanJ == 0 || lifespanL == 0) {
          if (countK > 0) {
            track1 = false;
            track2 = false;
            track3 = true;
            track4 = false;
            //
            iitrack1 = 0;
            iitrack2 = 0;
            iitrack4 = 0;
          }
        }
        if (lifespanK > button-10 && lifespanK < button) {
          lifespanK = 0;      
          iitrack3 = 1;
        }
      }

      if (iitrack3 == 1) {
        if (countK > 0) {
          track3 = false;
        }
        if (lifespanK > button-10 && lifespanK < button) {
          lifespanK = 0;      
          iitrack3 = 0;
        }
      }
    }
    //////////
    if (rec == false) {
      if (iitrack4 == 0) {
        if (lifespanI == 0 || lifespanJ == 0 || lifespanK == 0) {
          if (countL > 0) {
            track1 = false;
            track2 = false;
            track3 = false;
            track4 = true;
            //
            iitrack1 = 0;
            iitrack2 = 0;
            iitrack3 = 0;
          }
        }
        if (lifespanL > button-10 && lifespanL < button) {
          lifespanL = 0;      
          iitrack4 = 1;
        }
      }
      if (iitrack4 == 1) {
        if (countL > 0) {
          track4 = false;
        }
        if (lifespanL > button-10 && lifespanL < button) {
          lifespanL = 0;      
          iitrack4 = 0;
        }
      }
    }
    if (rec == true) {
      lifespanI = 126;
      lifespanJ = 126;
      lifespanK = 126;
      lifespanL = 126;
      lifespanC = 126;
      play = false;
      stop = false;
    }

    println(lifespanC);

    if (aa == 0) {
      cp5.get(Toggle.class, "toggleInstrument1").setValue(false);
      cp5.get(Toggle.class, "toggleInstrument2").setValue(false);
      cp5.get(Toggle.class, "Grid1").setValue(false);
      cp5.get(Toggle.class, "Grid2").setValue(false);
      cp5.get(Toggle.class, "Grid3").setValue(false);
      cp5.get(Toggle.class, "Grid4").setValue(false);
      cp5.get(Toggle.class, "Grid5").setValue(false);
      cp5.get(Toggle.class, "Grid6").setValue(false);
      cp5.get(Toggle.class, "Grid7").setValue(false);
      cp5.get(Toggle.class, "Grid8").setValue(false);
      cp5.get(Toggle.class, "Grid9").setValue(false);
      cp5.get(Toggle.class, "Grid10").setValue(false);
      cp5.get(Toggle.class, "Grid11").setValue(false);
      cp5.get(Toggle.class, "Grid12").setValue(false);
      cp5.get(ScrollableList.class, "Midi1Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi2Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi3Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi4Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi5Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi6Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi7Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi8Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi9Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi10Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi11Ch").setValue(0);
      cp5.get(ScrollableList.class, "Midi12Ch").setValue(0);
      cp5.get(Knob.class, "1midi").setValue(0);
      cp5.get(Knob.class, "2midi").setValue(0);
      cp5.get(Knob.class, "3midi").setValue(0);
      cp5.get(Knob.class, "4midi").setValue(0);

      aa = 1;
    }

    if (aa == 1) {
      cp5.get(ScrollableList.class, "Midi8Ch").setValue(1);
      cp5.get(Toggle.class, "Grid8").setValue(true);
      int aaa = 0;

      if (aaa == 0) {

        if (countH > 0 && g8==1) { 
          // Draw a square at Grid8 IF movement detected
          fill(triggerH); 
          rect(3*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 
          //Send E3
          busA.sendNoteOn(midi8, 64, 97); 
          println("MidiA: " + midi8, 64, 97);
        } else if (countH <= 0 && g8==1) {
          if (lifeH > 127 || lifeH <0) {
            AddLifeH = -AddLifeH;
          }
          lifeH = lifeH + AddLifeH; 



          // Draw a square at Grid (0,0), IF movement detected
          fill(triggerH); 
          rect(3*videoScaleX, 1*videoScaleY, videoScaleX, videoScaleY); 

          busA.sendNoteOff(midi1, lifeH, 0);
        }
        if (triggerH == 0) {
          aaa = 1;
        }
      }
    }
  }
}
